Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tester import backtester\r\nfrom df_parser import Parser\r\nfrom metatrader import connect, shutdown\r\nfrom config import STRATEGIES, TIMEZONE, START, END\r\nimport time as t\r\nfrom datetime import datetime\r\nimport pytz\r\nimport numpy as np\r\nimport os\r\nimport math\r\n\r\n# os.system(f\"python trainer.py GBPUSD hunter\")\r\n# quit()\r\n\r\n# exec(open('ga.py').read())\r\n\r\n# timezone = pytz.timezone('Asia/Tel_Aviv')\r\n# # today = datetime.now(tz=timezone)\r\n# today = datetime.now().replace(tzinfo=timezone)\r\n# print(today)\r\n\r\n# start = datetime(2020, 1, 10, tzinfo=TIMEZONE)\r\n# end = datetime(2022, 5, 11, hour=13, tzinfo=TIMEZONE)\r\n\r\n# 200 days of training\r\n# pairs = [\"GBPUSD\"]\r\n# params = [[41, -15, 11, 5, -0.298276, 0.342503, -0.060626, 0.379231, -0.151108, -0.482984, 0.408558, 11, 4.198,\r\n# -2.544, 0.778563, 11, 0, 12, 8, 18, 0.798253, -0.775652, -0.610665, 0.150835, 0.333732, 0.657332]]\r\n\r\n# 50 days, 419.2 pips, 10.23% drawdown\r\n# pairs = [\"GBPUSD\"]\r\n# params = [[24, -10, 100, 9, -0.740755, -0.279031, -0.249923, 0.701846, 0.85625, 0.075903, 0.017171, 0.561, 0.697574,\r\n#            -0.442744, 23, 0.154, 0.538, 0.280815, 4, 0, 0, 8, 9, 17]]\r\n\r\n# pairs = [\"GBPUSD\", \"EURUSD\", \"EURJPY\", \"USDCHF\"]\r\n# params = [[8.737919080411682, 21.045104575121513, 8.441006337722525]]\r\nparams = [\r\n    [68.16267646268227, 29.551871547642865, -19.55960487332239, 9.576649210393155, 96.54911558058686, 6.0220227391377925, 13.076362728376695, 28.581955667351625], [100, 10], [100, 10], [100, 10], [100, 10], [100, 10], [100, 10]\r\n]\r\n\r\n# pairs = [\"GBPUSD\", \"EURUSD\", \"EURJPY\", \"USDJPY\", \"USDCAD\", \"AUDUSD\", \"USDCHF\"]\r\n# params = [\r\n#     [50, -30, 40, 100, 13, 22, 10, 26, 22, 10.34, 81.51, 66.04, 94.72, -48.78, -9.85, 9, 18],\r\n#     [50, -30, 40, 100, 13, 22, 10, 26, 22, 10.34, 81.51, 66.04, 94.72, -48.78, -9.85, 9, 18],\r\n#     [50, -30, 40, 100, 13, 22, 10, 26, 22, 10.34, 81.51, 66.04, 94.72, -48.78, -9.85, 9, 18],\r\n#     [50, -30, 40, 100, 13, 22, 10, 26, 22, 10.34, 81.51, 66.04, 94.72, -48.78, -9.85, 9, 18],\r\n#     [50, -30, 40, 100, 13, 22, 10, 26, 22, 10.34, 81.51, 66.04, 94.72, -48.78, -9.85, 9, 18],\r\n#     [50, -30, 40, 100, 13, 22, 10, 26, 22, 10.34, 81.51, 66.04, 94.72, -48.78, -9.85, 9, 18],\r\n#     [50, -30, 40, 100, 13, 22, 10, 26, 22, 10.34, 81.51, 66.04, 94.72, -48.78, -9.85, 9, 18],\r\n# ]\r\n\r\n# Concentration 30, 20\r\n\r\n#\r\n# # print(START)\r\n# # print(END)\r\n#\r\n# connect()\r\n\r\npairs = STRATEGIES[\"example_strategy\"]['pairs']\r\n\r\n# Uncomment to update the source data (MT5 is required)\r\n# for pair in pairs:\r\n#     Parser(pair=pair, strategy=STRATEGIES[\"hunter\"], save=True, start=START, end=END)\r\n\r\n# shutdown()\r\n# start = t.time()\r\nbacktester(pairs=pairs, strategy=STRATEGIES[\"example_strategy\"], params=params, plotting=True, verbose=True, cushion=0)\r\n# end = t.time()\r\n# print(\"Elapsed (with compilation) = %s\" % (end - start))\r\n\r\n# connect()\r\n# currency = Currency(pair=pairs[0], strategy=STRATEGIES[\"rsi_vwap\"], params=params[0], start=START,\r\n#                     end=END)\r\n# shutdown()\r\n# currency.plotter()\r\n\r\n# start = t.time()\r\n# update_params(pair, end_pos=end_pos, test=test)\r\n\r\n# results = backtester(\r\n#     pairs=pairs, strategy=STRATEGIES[\"rsi_vwap\"], params=params, plotting=True, verbose=True, cushion=0\r\n# )\r\n\r\n# end = t.time()\r\n# print(\"Elapsed (with compilation) = %s\" % (end - start))\r\n# # results = backtester(\r\n# #     pairs=pairs, strategy=STRATEGIES[\"rsi_vwap\"], params=params, plotting=True, verbose=True, cushion=0\r\n# # )\r\n# print(results)\r\n# # quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	(revision e95ad69897018ef99d6e06a0a2747f838c696a72)
+++ b/test.py	(date 1695496652005)
@@ -60,8 +60,8 @@
 pairs = STRATEGIES["example_strategy"]['pairs']
 
 # Uncomment to update the source data (MT5 is required)
-# for pair in pairs:
-#     Parser(pair=pair, strategy=STRATEGIES["hunter"], save=True, start=START, end=END)
+for pair in pairs:
+    Parser(pair=pair, strategy=STRATEGIES["example_strategy"], save=True, start=START, end=END)
 
 # shutdown()
 # start = t.time()
Index: test_trader.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from indicators import *\r\nimport numpy as np\r\nfrom numba import njit\r\nimport h5py\r\nfrom statistics import mean\r\nfrom config import FILES_DIR\r\nimport finplot as fplt\r\nimport random\r\nfrom datetime import timezone\r\nimport pandas as pd\r\n\r\n\r\n@njit\r\ndef pip_calc(start_price, end_price, multiplier, spread=0):\r\n    return (end_price - start_price) / multiplier - spread\r\n\r\n\r\nclass Currency:\r\n\r\n    def __init__(self, pair, strategy, verbose=False, cushion=2, **kw):\r\n        self.name = pair\r\n        self.verbose = verbose\r\n        self.params = kw[\"params\"]\r\n        self.strategy = strategy\r\n        # self.start_pos = round(max(self.params[2:8]))\r\n        self.start_pos = 0\r\n        all_tfs = list()\r\n        for k, v in self.strategy['indicators'].items():\r\n            all_tfs += list(v.keys())\r\n\r\n        self.tfs = sorted(list(set(all_tfs)), key=self.strategy['tfs'].index)\r\n\r\n        with h5py.File(f\"{FILES_DIR}pairs_data.h5\", 'r') as f:\r\n            self.df = {tf: np.array(f[f\"{tf}_{pair}\"]) for tf in self.tfs}\r\n\r\n        self.config = self.account_data = pd.read_csv(FILES_DIR + \"account_data.csv\", index_col=0)\r\n\r\n        # Main\r\n        self.index = index_to_datetime(self.df[self.tfs[0]][\"time\"])\r\n        self.open = self.df[self.tfs[0]]['open']\r\n        self.high = self.df[self.tfs[0]]['high']\r\n        self.low = self.df[self.tfs[0]]['low']\r\n        self.close = self.df[self.tfs[0]]['close']\r\n        self.vol = self.df[self.tfs[0]]['vol']\r\n        self.spread = self.df[self.tfs[0]]['spread'] / 10\r\n\r\n        if str(self.open[-1]).index(\".\") >= 3:  # JPY pair\r\n            self.multiplier = 0.01\r\n        else:\r\n            self.multiplier = 0.0001\r\n\r\n        self.tp = 30\r\n        self.sl = 30\r\n        self.tp_multiplier = 1.5\r\n        self.slope_level = 0.0002\r\n        self.break_even = 25\r\n        self.atr_multiplier = 5  # 1-30\r\n        self.atr_period = 21  # 10-100\r\n        self.trailing_stop = 30\r\n\r\n        self.indicators = list()\r\n\r\n        for indicator in self.strategy['indicators']:\r\n            setattr(\r\n                self, indicator,\r\n                Indicator(name=indicator, df=self.df,\r\n                          strategy=self.strategy, tfs=self.tfs))\r\n\r\n            indi = getattr(self, indicator)\r\n\r\n            self.indicators.append(indi)\r\n\r\n        self.take_profit = 1\r\n        self.active_longs = []\r\n        self.active_shorts = []\r\n        self.long_tps = []\r\n        self.short_tps = []\r\n        self.long_sls = []\r\n        self.short_sls = []\r\n        self.long_lot_sizes = []\r\n        self.short_lot_sizes = []\r\n        self.profits = []\r\n        self.losses = []\r\n        self.profit_pips = []\r\n        self.loss_pips = []\r\n        self.went_long_price = np.empty(len(self.high))\r\n        self.closed_long_profit = np.empty(len(self.high))\r\n        self.closed_long_loss = np.empty(len(self.high))\r\n        self.went_short_price = np.empty(len(self.high))\r\n        self.closed_short_profit = np.empty(len(self.high))\r\n        self.closed_short_loss = np.empty(len(self.high))\r\n        self.went_long_price[:] = np.nan\r\n        self.closed_long_profit[:] = np.nan\r\n        self.closed_long_loss[:] = np.nan\r\n        self.went_short_price[:] = np.nan\r\n        self.closed_short_profit[:] = np.nan\r\n        self.closed_short_loss[:] = np.nan\r\n        self.closed_long_idx = []\r\n        self.closed_short_idx = []\r\n        self.pips = 0\r\n        self.profit_trades = 0\r\n        self.loss_trades = 0\r\n        self.profit_longs = 0\r\n        self.loss_longs = 0\r\n        self.profit_shorts = 0\r\n        self.loss_shorts = 0\r\n        self.total_trades = 0\r\n        self.cushion = cushion\r\n\r\n        self.exhaustion_up = False\r\n        self.exhaustion_down = False\r\n        self.long_pullback = 0\r\n        self.short_pullback = 0\r\n        self.today_opening = 0\r\n        self.direction_lost = 0\r\n        self.direction_won = 0\r\n        self.adjust_lot_size = True\r\n        self.ready_long = False\r\n        self.ready_short = False\r\n\r\n        self.base_level = round(self.close[0], 3) + 3.1 * self.multiplier\r\n        self.up_level = self.base_level + 10 * self.multiplier\r\n        self.down_level = self.base_level - 10 * self.multiplier\r\n        self.last_level = 0\r\n        self.level_step = 10 * self.multiplier\r\n\r\n        self.done_longs = []\r\n        self.done_shorts = []\r\n\r\n        self.ready_to_long = False\r\n        self.ready_to_short = False\r\n\r\n        self.high_range = 0\r\n        self.low_range = 0\r\n        self.finished = True\r\n\r\n        # Psychological Levels\r\n        # if self.multiplier == 0.0001:\r\n        #     level = round(self.close[index - 1], 2)\r\n        # else:\r\n        #     level = round(self.close[index - 1])\r\n\r\n    def tester(self, account, index):\r\n        # Add Profit Percent calculator\r\n        # Add ADX Indicator\r\n        # Move config file to os.env\r\n\r\n        self.check_exit(account, index, trailing_stop=False, fixed_tp_sl=True, martin=True, fast_growth=False)\r\n\r\n        if len(self.active_longs) == 0 and len(self.active_shorts) == 0:\r\n            direction = random.randint(-1, 1)\r\n            if direction == 1:\r\n                self.open_long(index, account.lot_size)\r\n            else:\r\n                self.open_short(index, account.lot_size)\r\n\r\n    def open_long(self, index, lot_size, open_price=None, custom_tp=None, custom_sl=None, sl_multiplied_tp=None,\r\n                  previous_tp=False, previous_sl=False):\r\n        if not open_price:\r\n            open_price = self.open[index]\r\n\r\n        price = open_price + self.multiplier * (self.spread[index-1] + self.cushion)\r\n\r\n        tp = price + self.tp * self.multiplier\r\n        sl = price - self.sl * self.multiplier\r\n\r\n        if custom_tp:\r\n            tp = custom_tp\r\n\r\n        if custom_sl:\r\n            sl = custom_sl\r\n\r\n        if sl_multiplied_tp:\r\n            tp = price + (price - sl) * sl_multiplied_tp\r\n\r\n        if previous_tp:\r\n            if len(self.long_tps) > 0:\r\n                self.tp = self.long_tps[-1]\r\n\r\n        if previous_sl:\r\n            if len(self.long_sls) > 0:\r\n                self.sl = self.long_sls[-1]\r\n\r\n        self.long_tps.append(tp)\r\n        self.long_sls.append(sl)\r\n        self.active_longs.append(price)\r\n        self.long_lot_sizes.append(lot_size)\r\n        self.went_long_price[index] = price\r\n\r\n        if self.verbose:\r\n            print(f\"Going Long on {self.name}, {lot_size}\")\r\n            print(self.index[index])\r\n            print(f\"Take Profit: {tp}\")\r\n            print(f\"Stop Loss: {sl}\")\r\n            print(\"Active Longs: \" + str(self.active_longs))\r\n            print(\"\\n\")\r\n\r\n    def open_short(self, index, lot_size, open_price=None, custom_tp=None, custom_sl=None, sl_multiplied_tp=None,\r\n                   previous_tp=False, previous_sl=False):\r\n        if not open_price:\r\n            open_price = self.open[index]\r\n\r\n        tp = open_price - self.tp * self.multiplier\r\n        sl = open_price + self.sl * self.multiplier\r\n\r\n        if custom_tp:\r\n            tp = custom_tp\r\n\r\n        if custom_sl:\r\n            sl = custom_sl\r\n\r\n        if sl_multiplied_tp:\r\n            tp = open_price - (sl - open_price) * sl_multiplied_tp\r\n\r\n        if previous_tp:\r\n            if len(self.short_tps) > 0:\r\n                tp = self.short_tps[-1]\r\n\r\n        if previous_sl:\r\n            if len(self.short_sls) > 0:\r\n                sl = self.short_sls[-1]\r\n\r\n        self.active_shorts.append(open_price)\r\n        self.short_tps.append(tp)\r\n        self.short_sls.append(sl)\r\n        self.short_lot_sizes.append(lot_size)\r\n        self.went_short_price[index] = open_price\r\n\r\n        if self.verbose:\r\n            print(f\"Going Short on {self.name}, {lot_size}\")\r\n            print(self.index[index])\r\n            print(f\"Take Profit: {tp}\")\r\n            print(f\"Stop Loss: {sl}\")\r\n            print(\"Active Shorts: \" + str(self.active_shorts))\r\n            print(\"\\n\")\r\n\r\n    def check_exit(self, account, index, close_long=False, close_short=False, martin=False, break_even=False,\r\n                   trailing_stop=False, atr_trailing=False, fast_growth=False, fixed_tp_sl=False):\r\n\r\n        # Add Break Even mode with a fixed tp of ~ 1 pip after price moved away 20+ pips\r\n\r\n        if fast_growth:\r\n            self.adjust_lot_size = False\r\n            account.lot_size = account.fast_growth[account.win_series] / 100\r\n\r\n        if len(self.active_longs) > 0:\r\n            for i, value in enumerate(self.active_longs):\r\n\r\n                current_price = self.open[index]\r\n                pips = 0\r\n\r\n                if atr_trailing:\r\n                    if current_price - self.atr[index - 1] * self.atr_multiplier > self.long_sls[i]:\r\n                        self.long_sls[i] = current_price - self.atr[index - 1] * self.atr_multiplier\r\n\r\n                if trailing_stop:\r\n                    if current_price - self.trailing_stop * self.multiplier > self.long_sls[i]:\r\n                        self.long_sls[i] = current_price - self.trailing_stop * self.multiplier\r\n\r\n                if fixed_tp_sl:\r\n                    if self.high[index-1] >= self.long_tps[i] or current_price >= self.long_tps[i]:\r\n                        pips = round(pip_calc(value, self.long_tps[i], self.multiplier), 2)\r\n\r\n                    elif self.low[index-1] <= self.long_sls[i] or current_price <= self.long_sls[i]:\r\n                        pips = round(pip_calc(value, self.long_sls[i], self.multiplier), 2)\r\n\r\n                if current_price >= self.long_tps[i] or current_price <= self.long_sls[i] or close_long or pips != 0:\r\n                    if not fixed_tp_sl:\r\n                        pips = round(pip_calc(value, current_price, self.multiplier), 2)\r\n\r\n                    result = round(pips * (self.long_lot_sizes[i] * account.currency_converter), 2)\r\n\r\n                    if pips >= 0:\r\n                        if self.verbose:\r\n                            print(f\"Closing {self.long_lot_sizes[i]} {self.name} Long in profit\")\r\n                            print(f\"Price: {current_price}\")\r\n                            print('Pips: ' + str(pips))\r\n                        self.profits.append(result)\r\n                        account.profits.append(result)\r\n                        self.profit_pips.append(pips)\r\n                        account.profit_pips.append(pips)\r\n                        self.profit_longs += 1\r\n                        account.profit_longs += 1\r\n                        self.profit_trades += 1\r\n                        account.profit_trades += 1\r\n                        self.closed_long_profit[index] = current_price\r\n                        if martin:\r\n                            account.lot_size = account.lot_size_start\r\n                        self.direction_lost = 0\r\n                        self.direction_won = 1\r\n                        if fast_growth:\r\n                            if account.win_series < len(account.fast_growth) - 1:\r\n                                account.win_series += 1\r\n                    else:\r\n                        if self.verbose:\r\n                            print(f\"Closing {self.long_lot_sizes[i]} {self.name} Long in loss\")\r\n                            print(f\"Price: {current_price}\")\r\n                            print('Pips: ' + str(pips))\r\n                        self.losses.append(result)\r\n                        account.losses.append(result)\r\n                        self.loss_pips.append(pips)\r\n                        account.loss_pips.append(pips)\r\n                        self.loss_longs += 1\r\n                        account.loss_longs += 1\r\n                        self.loss_trades += 1\r\n                        account.loss_trades += 1\r\n                        self.closed_long_loss[index] = current_price\r\n                        if martin:\r\n                            account.lot_size *= 2\r\n                        self.direction_lost = 1\r\n                        self.direction_won = 0\r\n                        if fast_growth:\r\n                            if account.win_series > 0:\r\n                                account.win_series -= 1\r\n\r\n                    account.balance += result\r\n                    self.pips += pips\r\n                    account.pips += pips\r\n                    self.total_trades += 1\r\n                    account.total_trades += 1\r\n\r\n                    self.active_longs.pop(i)\r\n                    self.long_tps.pop(i)\r\n                    self.long_sls.pop(i)\r\n                    self.long_lot_sizes.pop(i)\r\n                    self.closed_long_idx.append(index)\r\n                    if self.verbose:\r\n                        print(f\"Result: ${result}\")\r\n                        print(f\"Balance: ${account.balance}\")\r\n                        print(self.index[index])\r\n                        print(\"Active Longs: \" + str(self.active_longs))\r\n                        print(\"Active Shorts: \" + str(self.active_shorts))\r\n                        print(\"\\n\")\r\n                    if len(self.active_longs) > 0:\r\n                        self.check_exit(\r\n                            account, index, close_long, close_short, martin, break_even, trailing_stop, atr_trailing,\r\n                            fast_growth, fixed_tp_sl\r\n                        )\r\n\r\n        if len(self.active_shorts) > 0:\r\n            for i, value in enumerate(self.active_shorts):\r\n\r\n                current_price = self.open[index] + (self.spread[index-1] + self.cushion) * self.multiplier\r\n                pips = 0\r\n\r\n                if atr_trailing:\r\n                    if current_price + self.atr[index - 1] * self.atr_multiplier < self.short_sls[i]:\r\n                        self.short_sls[i] = current_price + self.atr[index - 1] * self.atr_multiplier\r\n\r\n                if trailing_stop:\r\n                    if current_price + self.trailing_stop * self.multiplier < self.short_sls[i]:\r\n                        self.short_sls[i] = current_price + self.trailing_stop * self.multiplier\r\n\r\n                if fixed_tp_sl:\r\n                    if self.low[index-1] + (self.spread[index-1] + self.cushion) * self.multiplier <= self.short_tps[i]\\\r\n                            or current_price <= self.short_tps[i]:\r\n                        pips = round((value - self.short_tps[i]) / self.multiplier, 2)\r\n                    elif self.high[index-1] + (self.spread[index-1] + self.cushion) * self.multiplier >= \\\r\n                            self.short_sls[i] or current_price >= self.short_sls[i]:\r\n                        pips = round((value - self.short_sls[i]) / self.multiplier, 2)\r\n\r\n                if current_price <= self.short_tps[i] or current_price >= self.short_sls[i] or close_short or pips != 0:\r\n                    if not fixed_tp_sl:\r\n                        pips = round((value - current_price) / self.multiplier, 2)\r\n\r\n                    result = round(pips * (self.short_lot_sizes[i] * account.currency_converter), 2)\r\n\r\n                    if pips >= 0:\r\n                        if self.verbose:\r\n                            print(f\"Closing {self.short_lot_sizes[i]} {self.name} Short in profit\")\r\n                            print(f\"Price: {current_price}\")\r\n                            print('Pips: ' + str(pips))\r\n                        self.profits.append(result)\r\n                        account.profits.append(result)\r\n                        self.profit_pips.append(pips)\r\n                        account.profit_pips.append(pips)\r\n                        self.profit_shorts += 1\r\n                        account.profit_shorts += 1\r\n                        self.profit_trades += 1\r\n                        account.profit_trades += 1\r\n                        self.closed_short_profit[index] = current_price\r\n                        if martin:\r\n                            account.lot_size = account.lot_size_start\r\n                        self.direction_lost = 0\r\n                        self.direction_won = -1\r\n                        if fast_growth:\r\n                            if account.win_series < len(account.fast_growth) - 1:\r\n                                account.win_series += 1\r\n                    else:\r\n                        if self.verbose:\r\n                            print(f\"Closing {self.short_lot_sizes[i]} {self.name} Short in loss\")\r\n                            print(f\"Price: {current_price}\")\r\n                            print('Pips: ' + str(pips))\r\n                        self.losses.append(result)\r\n                        account.losses.append(result)\r\n                        self.loss_pips.append(pips)\r\n                        account.loss_pips.append(pips)\r\n                        self.loss_shorts += 1\r\n                        account.loss_shorts += 1\r\n                        self.loss_trades += 1\r\n                        account.loss_trades += 1\r\n                        self.closed_short_loss[index] = current_price\r\n                        if martin:\r\n                            account.lot_size *= 2\r\n                        self.direction_lost = -1\r\n                        self.direction_won = 0\r\n                        if fast_growth:\r\n                            if account.win_series > 0:\r\n                                account.win_series -= 1\r\n\r\n                    account.balance += result\r\n                    self.pips += pips\r\n                    account.pips += pips\r\n                    self.total_trades += 1\r\n                    account.total_trades += 1\r\n\r\n                    self.active_shorts.pop(i)\r\n                    self.short_tps.pop(i)\r\n                    self.short_sls.pop(i)\r\n                    self.short_lot_sizes.pop(i)\r\n                    self.closed_short_idx.append(index)\r\n                    if self.verbose:\r\n                        print(f\"Result: ${result}\")\r\n                        print(f\"Balance: ${account.balance}\")\r\n                        print(self.index[index])\r\n                        print(\"Active Longs: \" + str(self.active_longs))\r\n                        print(\"Active Shorts: \" + str(self.active_shorts))\r\n                        print(\"\\n\")\r\n                    if len(self.active_shorts) > 0:\r\n                        self.check_exit(\r\n                            account, index, close_long, close_short, martin, break_even, trailing_stop, atr_trailing,\r\n                            fast_growth, fixed_tp_sl\r\n                        )\r\n\r\n    def total_report(self, account):\r\n        print(\"Report for \" + self.name)\r\n        if self.profit_trades != 0:\r\n            print(\"Winning rate: \" + str(round(100 / self.total_trades * self.profit_trades)) + \"%\")\r\n        else:\r\n            print(\"Winning rate: 0%\")\r\n        print(\"Profit trades: \" + str(self.profit_trades))\r\n        print(\"Loss trades: \" + str(self.loss_trades))\r\n        print(\"Active longs: \" + str(len(self.active_longs)))\r\n        print(\"Active shorts: \" + str(len(self.active_shorts)))\r\n        print(\"Number of longs: \" + str(len(self.closed_long_idx)))\r\n        print(\"Profit longs: \" + str(self.profit_longs))\r\n        print(\"Loss longs: \" + str(self.loss_longs))\r\n        print(\"Number of shorts: \" + str(len(self.closed_short_idx)))\r\n        print(\"Profit shorts: \" + str(self.profit_shorts))\r\n        print(\"Loss shorts: \" + str(self.loss_shorts))\r\n        if len(self.profits) > 0:\r\n            print(\"Biggest profit: $\" + str(max(self.profits)))\r\n        else:\r\n            print(\"Biggest profit: $0\")\r\n        if len(self.losses) > 0:\r\n            print(\"Biggest loss: -$\" + str(min(self.losses))[1:])\r\n        else:\r\n            print(\"Biggest loss: $0\")\r\n        if len(self.profits) > 0:\r\n            print(\"Average profit: $\" + str(round(mean(self.profits), 2)))\r\n        else:\r\n            print(\"Average profit: $0\")\r\n        if len(self.losses) > 0:\r\n            print(\"Average loss: -$\" + str(round(mean(self.losses), 2))[1:])\r\n        else:\r\n            print(\"Average loss: $0\")\r\n        if len(self.profit_pips) > 0:\r\n            print(\"Max pips made: \" + str(max(self.profit_pips)))\r\n        else:\r\n            print(\"Max pips made: 0\")\r\n        if len(self.loss_pips) > 0:\r\n            print(\"Max pips lost: \" + str(min(self.loss_pips)))\r\n        else:\r\n            print(\"Max pips lost: 0\")\r\n        if len(self.profit_pips) > 0:\r\n            print(\"Average pips made: \" + str(round(mean(self.profit_pips), 1)))\r\n        else:\r\n            print(\"Average pips made: 0\")\r\n        if len(self.loss_pips) > 0:\r\n            print(\"Average pips lost: \" + str(round(mean(self.loss_pips), 1)))\r\n        else:\r\n            print(\"Average pip lost: 0\")\r\n        print(\"Total trades: \" + str(self.total_trades))\r\n        if self.total_trades != 0:\r\n            print(\"Trading rate: \" + str((account.trading_period[1] - account.trading_period[0]) / self.total_trades)\r\n                  + \" minutes\")\r\n        else:\r\n            print(\"Trading rate: 0\")\r\n        print(\"Pips: \" + str(self.pips))\r\n        print(\"\\n\")\r\n\r\n    def plotter(self, dark=True):\r\n        if dark:\r\n            fplt.foreground = '#fff'\r\n            fplt.background = '#090c0e'\r\n            fplt.odd_plot_background = '#090c0e'\r\n            fplt.candle_bull_color = fplt.candle_bull_body_color = '#0b0'\r\n            fplt.candle_bear_color = '#a23'\r\n            volume_transparency = '6'\r\n        else:\r\n            fplt.foreground = '#444'\r\n            fplt.background = fplt.candle_bull_body_color = '#fff'\r\n            fplt.candle_bull_color = '#380'\r\n            fplt.candle_bear_color = '#c50'\r\n            volume_transparency = 'c'\r\n        fplt.volume_bull_color = fplt.volume_bull_body_color = fplt.candle_bull_color + volume_transparency\r\n        fplt.volume_bear_color = fplt.candle_bear_color + volume_transparency\r\n        fplt.cross_hair_color = fplt.foreground + '8'\r\n        fplt.draw_line_color = '#888'\r\n        fplt.draw_done_color = '#555'\r\n\r\n        # window background\r\n        for win in fplt.windows:\r\n            win.setBackground(fplt.background)\r\n\r\n        # axis, crosshair, candlesticks, volumes\r\n        axs = [ax for win in fplt.windows for ax in win.axs]\r\n        axs += fplt.overlay_axs\r\n        axis_pen = fplt._makepen(color=fplt.foreground)\r\n        for ax in axs:\r\n            ax.axes['right']['item'].setPen(axis_pen)\r\n            ax.axes['right']['item'].setTextPen(axis_pen)\r\n            ax.axes['bottom']['item'].setPen(axis_pen)\r\n            ax.axes['bottom']['item'].setTextPen(axis_pen)\r\n            if ax.crosshair is not None:\r\n                ax.crosshair.xtext.setColor(fplt.foreground)\r\n                ax.crosshair.ytext.setColor(fplt.foreground)\r\n            for item in ax.items:\r\n                if isinstance(item, fplt.FinPlotItem):\r\n                    isvolume = ax in fplt.overlay_axs\r\n                    if not isvolume:\r\n                        item.colors.update(\r\n                            dict(bull_shadow=fplt.candle_bull_color,\r\n                                 bull_frame=fplt.candle_bull_color,\r\n                                 bull_body=fplt.candle_bull_body_color,\r\n                                 bear_shadow=fplt.candle_bear_color,\r\n                                 bear_frame=fplt.candle_bear_color,\r\n                                 bear_body=fplt.candle_bear_color))\r\n                    else:\r\n                        item.colors.update(\r\n                            dict(bull_frame=fplt.volume_bull_color,\r\n                                 bull_body=fplt.volume_bull_body_color,\r\n                                 bear_frame=fplt.volume_bear_color,\r\n                                 bear_body=fplt.volume_bear_color))\r\n                    item.repaint()\r\n\r\n        fplt.display_timezone = timezone.utc\r\n        x = self.index\r\n        marker_size = 3\r\n        ax = fplt.create_plot(self.name, rows=self.strategy[\"plotting_rows\"], init_zoom_periods=200)\r\n\r\n\r\n        def plot_atr(ax):\r\n            fplt.plot(x, self.atr_upper, legend=\"Upper ATR\", style=\"...\", color=\"blue\", ax=ax)\r\n            fplt.plot(x, self.atr_lower, legend=\"Lower ATR\", style=\"...\", color=\"blue\", ax=ax)\r\n\r\n        def plot_macd(ax):\r\n            fplt.volume_ocv([x, self.open, self.close, self.macd_histogram], ax=ax, colorfunc=fplt.strength_colorfilter)\r\n            fplt.plot(x, self.macd_line, ax=ax, legend='MACD')\r\n            fplt.plot(x, self.macd_signal, ax=ax, legend='Signal')\r\n\r\n        def plot_overlay_bars():\r\n            overlay_plot = fplt.candlestick_ochl(\r\n                [x, self.overlay_open, self.overlay_close, self.overlay_high, self.overlay_low]\r\n            )\r\n            overlay_plot.colors.update(dict(bull_body='#bfb', bull_shadow='#ada', bear_body='#fbc', bear_shadow='#dab'))\r\n\r\n        def plot_slope(ax, data_arr, title, period, color):\r\n            fplt.add_line((0, 0), (len(x), 0), color='#fff', style='---', ax=ax)\r\n            fplt.plot(x, slope(data_arr, period), legend=title, color=color, ax=ax)\r\n\r\n        def plot_wpr_trend():\r\n            fplt.plot(x, self.wpr_up_lines, legend=\"WPR Trend Up\", width=marker_size, color=\"blue\", ax=ax[0])\r\n            fplt.plot(x, self.wpr_down_lines, legend=\"WPR Trend Down\", width=marker_size, color=\"red\", ax=ax[0])\r\n\r\n        def plot_markers():\r\n            fplt.plot(x, self.went_short_price, style='v', width=marker_size, legend=\"Went Short\", color='purple',\r\n                      ax=ax[0])\r\n            fplt.plot(x, self.went_long_price, style='^', width=marker_size, legend=\"Went Long\", color='purple',\r\n                      ax=ax[0])\r\n            fplt.plot(x, self.closed_long_profit, style='^', width=marker_size, legend=\"Closed Long Profit\",\r\n                      color='green', ax=ax[0])\r\n            fplt.plot(x, self.closed_long_loss, style='^', width=marker_size, legend=\"Closed Long Loss\",\r\n                      color='red', ax=ax[0])\r\n            fplt.plot(x, self.closed_short_profit, style='v', width=marker_size, legend=\"Closed Short Profit\",\r\n                      color='green', ax=ax[0])\r\n            fplt.plot(x, self.closed_short_loss, style='v', width=marker_size, legend=\"Closed Short Loss\",\r\n                      color='red', ax=ax[0])\r\n\r\n        [indicator.plot(x, ax) for indicator in self.indicators]\r\n\r\n        # plot_atr(ax1)\r\n        # plot_macd(ax2)\r\n        # plot_slope(ax4, self.)\r\n        # plot_wpr_trend()\r\n        # plot_overlay_bars()\r\n        plot_markers()\r\n\r\n        # for n in range(self.high_peaks.shape[1]):\r\n        #     fplt.plot(x, self.high_peaks[:, n], color='green', ax=ax1)\r\n        #     fplt.plot(x, self.low_peaks[:, n], color='blue', ax=ax1)\r\n\r\n        # fplt.plot(x, self.peaks_up, style=\"o\", color='green', ax=ax1)\r\n        # fplt.plot(x, self.peaks_down, style=\"o\", color='red', ax=ax1)\r\n\r\n        # fplt.plot(x, self.direction, color=\"white\", ax=ax2)\r\n\r\n        # fplt.add_line((0, 20), (len(x), 20), color='#fff', style='---', ax=ax3)\r\n        # fplt.add_line((0, 80), (len(x), 80), color='#fff', style='---', ax=ax3)\r\n        # fplt.set_y_range(0, 100, ax=ax3)\r\n        # fplt.set_y_range(-1, 1, ax=ax2)\r\n\r\n        # fplt.plot(x, self.fast_stoch, legend=\"Fast Stochastic\", color=\"purple\", ax=ax3)\r\n        # fplt.plot(x, self.slow_stoch, legend=\"Slow Stochastic\", color=\"yellow\", ax=ax3)\r\n        # fplt.plot(x, self.fast_stoch_rsi, legend=\"Fast Stochastic RSI\", color=\"blue\", ax=ax3)\r\n        # fplt.plot(x, self.slow_stoch_rsi, legend=\"Slow Stochastic RSI\", color=\"red\", ax=ax3)\r\n\r\n\r\n        # fplt.plot(x, self.trend, legend=\"M1 Trend\", color=\"white\", ax=ax2)\r\n        # fplt.plot(x, self.concentration, legend=\"M1 Concentration\", color=\"red\", ax=ax2)\r\n        # fplt.plot(x, self.m15_trend, legend=\"M15 Trend\", color=\"red\", ax=ax2)\r\n        # fplt.plot(x, self.tma_direction, legend=\"Direction\", color=\"white\", ax=ax2)\r\n        # fplt.plot(x, self.classic_trend, legend=\"Classic Trend\", color=\"red\", ax=ax2)\r\n        # fplt.plot(x, self.strength, legend=\"Strength M1\", color=\"white\", ax=ax4)\r\n        # fplt.plot(x, self.h1_trend, legend=\"H1 Trend\", color=\"red\", ax=ax3)\r\n        # fplt.plot(x, self.strength, legend=\"Strength M1\", color=\"white\", ax=ax2)\r\n        # fplt.plot(x, self.h1_strength, legend=\"Strength H1\", color=\"blue\", ax=ax2)\r\n        # fplt.plot(x, self.d1_strength, legend=\"Strength D1\", color=\"white\", ax=ax2)\r\n        # fplt.plot(x, self.h4_strength, legend=\"Strength H4\", color=\"green\", ax=ax2)\r\n        # fplt.add_line((0, 0), (len(x), 0), color='#fff', style='---', ax=ax4)\r\n\r\n        # fplt.plot(x, self.trading_range, legend=\"Trading Range\", color=\"white\", ax=ax3)\r\n\r\n        # fplt.plot(x, self.m15_strength, legend=\"Strength M15\", color=\"red\", ax=ax2)\r\n        # fplt.plot(x, self.tma_slope_upper, legend=\"TMA Slope Upper\", color=\"yellow\", ax=ax5)\r\n        # fplt.plot(x, self.tma_slope_lower, legend=\"TMA Slope Lower\", color=\"purple\", ax=ax5)\r\n        # fplt.plot(x, self.ema_20_slope, legend=\"M15 EMA 20 Slope(1)\", color=\"yellow\", ax=ax2)\r\n        # fplt.add_line((0, 0), (len(x), 0), color='#fff', style='---', ax=ax2)\r\n        # fplt.plot(x, self.m1_tma_width, legend=\"M1 TMA Width\",\r\n        #           color=\"white\", ax=ax5)\r\n\r\n        # fplt.plot(x, self.qqe[0], legend=\"Smoothed RSI\", color=\"blue\", ax=ax2)\r\n        # fplt.plot(x, self.qqe[1], legend=\"Slow Trailing Line\", style=\"---\", color=\"red\", ax=ax2)\r\n\r\n        # fplt.volume_ocv([x, self.open, self.close, self.vol], ax=ax1.overlay())\r\n        # overlay_plot = fplt.candlestick_ochl(\r\n        #     [x, self.open_ha, self.close_ha, self.high_ha, self.low_ha]\r\n        # )\r\n        # overlay_plot.colors.update(dict(bull_body='#bfb', bull_shadow='#ada', bear_body='#fbc', bear_shadow='#dab'))\r\n        fplt.candlestick_ochl([x, self.open, self.close, self.high, self.low], ax=ax[0])\r\n        # fplt.candlestick_ochl([x, self.open_ha, self.close_ha, self.high_ha, self.low_ha], ax=ax1)\r\n\r\n        fplt.show()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test_trader.py b/test_trader.py
--- a/test_trader.py	(revision e95ad69897018ef99d6e06a0a2747f838c696a72)
+++ b/test_trader.py	(date 1695496188482)
@@ -148,11 +148,20 @@
         self.check_exit(account, index, trailing_stop=False, fixed_tp_sl=True, martin=True, fast_growth=False)
 
         if len(self.active_longs) == 0 and len(self.active_shorts) == 0:
-            direction = random.randint(-1, 1)
-            if direction == 1:
-                self.open_long(index, account.lot_size)
-            else:
-                self.open_short(index, account.lot_size)
+            if self.direction_lost == -1:
+                self.open_long(index, account.lot_size)
+            elif self.direction_lost == 1:
+                self.open_short(index, account.lot_size)
+            elif self.direction_won == 1:
+                self.open_long(index, account.lot_size)
+            elif self.direction_won == -1:
+                self.open_short(index, account.lot_size)
+            else:
+                direction = random.randint(-1, 1)
+                if direction == 1:
+                    self.open_long(index, account.lot_size)
+                else:
+                    self.open_short(index, account.lot_size)
 
     def open_long(self, index, lot_size, open_price=None, custom_tp=None, custom_sl=None, sl_multiplied_tp=None,
                   previous_tp=False, previous_sl=False):
